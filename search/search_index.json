{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation Install via composer: $ composer require laminas/laminas-mvc-plugin-flashmessenger If you are using the laminas-component-installer , you're done! If not, you will need to add the component as a module to your application. Add the entry 'Laminas\\Mvc\\Plugin\\FlashMessenger' to your list of modules in your application configuration (typically one of config/application.config.php or config/modules.config.php ).","title":"Home"},{"location":"#installation","text":"Install via composer: $ composer require laminas/laminas-mvc-plugin-flashmessenger If you are using the laminas-component-installer , you're done! If not, you will need to add the component as a module to your application. Add the entry 'Laminas\\Mvc\\Plugin\\FlashMessenger' to your list of modules in your application configuration (typically one of config/application.config.php or config/modules.config.php ).","title":"Installation"},{"location":"basic-usage/","text":"Basic Usage A typical use case is to set a flash message in a controller action and render it in a view script after a redirect. The following example shows the use of a success message. Before starting, make sure laminas-mvc-plugin-flashmessenger is installed and configured . Create a Flash Message Store a message in the messenger of a controller action, e.g. module/Album/Controller/AlbumController.php : namespace Album\\Controller; use Laminas\\Mvc\\Controller\\AbstractActionController; class AlbumController extends AbstractActionController { public function editAction() { // Do some work… // Add success message $this-&gt;flashMessenger()-&gt;addSuccessMessage( 'Album created successfully.' ); // Redirect return $this-&gt;redirect()-&gt;toRoute('album'); } } Render a Flash Message Render all added success messages in a view script, e.g. module/Album/view/album/album/index.phtml : Name Usage &lt;?= $this-&gt;flashMessenger()-&gt;render('success') ?&gt; Constant Usage &lt;?= $this-&gt;flashMessenger()-&gt;render( Laminas\\Mvc\\Plugin\\FlashMessenger\\FlashMessenger::NAMESPACE_SUCCESS ) ?&gt; Output: &lt;ul class=\"success\"&gt;&lt;li&gt;Album created successfully.&lt;/li&gt;&lt;/ul&gt; Usage of Namespaces The flash messenger supports namespaces. This allows to render messages of different types in different places. Create Flash Messages for Different Namespaces Store a success message in the messenger of a controller action: $this-&gt;flashMessenger()-&gt;addSuccessMessage('…'); Store an info message in the messenger of a controller action: $this-&gt;flashMessenger()-&gt;addInfoMessage('…'); Store a warning message in the messenger of a controller action: $this-&gt;flashMessenger()-&gt;addWarningMessage('…'); Store an error message in the messenger of a controller action: $this-&gt;flashMessenger()-&gt;addErrorMessage('…'); Render Flash Messages for Different Namespaces Render all added success messages in a view script: Name Usage &lt;?= $this-&gt;flashMessenger()-&gt;render('success') ?&gt; Constant Usage &lt;?= $this-&gt;flashMessenger()-&gt;render( Laminas\\Mvc\\Plugin\\FlashMessenger\\FlashMessenger::NAMESPACE_SUCCESS ) ?&gt; Render all added info messages in a view script: Name Usage &lt;?= $this-&gt;flashMessenger()-&gt;render('info') ?&gt; Constant Usage &lt;?= $this-&gt;flashMessenger()-&gt;render( Laminas\\Mvc\\Plugin\\FlashMessenger\\FlashMessenger::NAMESPACE_INFO ) ?&gt; Render all added warning messages in a view script: Name Usage &lt;?= $this-&gt;flashMessenger()-&gt;render('warning') ?&gt; Constant Usage &lt;?= $this-&gt;flashMessenger()-&gt;render( Laminas\\Mvc\\Plugin\\FlashMessenger\\FlashMessenger::NAMESPACE_WARNING ) ?&gt; Render all added error messages in a view script: Name Usage &lt;?= $this-&gt;flashMessenger()-&gt;render('error') ?&gt; Constant Usage &lt;?= $this-&gt;flashMessenger()-&gt;render( Laminas\\Mvc\\Plugin\\FlashMessenger\\FlashMessenger::NAMESPACE_ERROR ) ?&gt; Use Default Namespace The flash messenger supports a default namespace which does not represent an explicit status. Store a default message in the messenger of a controller action: $this-&gt;flashMessenger()-&gt;addMessage('…'); Render all added default messages in a view script: &lt;?= $this-&gt;flashMessenger()-&gt;render() ?&gt; Learn More The controller plugin The view helper","title":"Basic Usage"},{"location":"basic-usage/#basic-usage","text":"A typical use case is to set a flash message in a controller action and render it in a view script after a redirect. The following example shows the use of a success message. Before starting, make sure laminas-mvc-plugin-flashmessenger is installed and configured .","title":"Basic Usage"},{"location":"basic-usage/#create-a-flash-message","text":"Store a message in the messenger of a controller action, e.g. module/Album/Controller/AlbumController.php : namespace Album\\Controller; use Laminas\\Mvc\\Controller\\AbstractActionController; class AlbumController extends AbstractActionController { public function editAction() { // Do some work… // Add success message $this-&gt;flashMessenger()-&gt;addSuccessMessage( 'Album created successfully.' ); // Redirect return $this-&gt;redirect()-&gt;toRoute('album'); } }","title":"Create a Flash Message"},{"location":"basic-usage/#render-a-flash-message","text":"Render all added success messages in a view script, e.g. module/Album/view/album/album/index.phtml : Name Usage &lt;?= $this-&gt;flashMessenger()-&gt;render('success') ?&gt; Constant Usage &lt;?= $this-&gt;flashMessenger()-&gt;render( Laminas\\Mvc\\Plugin\\FlashMessenger\\FlashMessenger::NAMESPACE_SUCCESS ) ?&gt; Output: &lt;ul class=\"success\"&gt;&lt;li&gt;Album created successfully.&lt;/li&gt;&lt;/ul&gt;","title":"Render a Flash Message"},{"location":"basic-usage/#usage-of-namespaces","text":"The flash messenger supports namespaces. This allows to render messages of different types in different places.","title":"Usage of Namespaces"},{"location":"basic-usage/#learn-more","text":"The controller plugin The view helper","title":"Learn More"},{"location":"controller-plugin/","text":"FlashMessenger Controller Plugin The FlashMessenger controller plugin is designed to create and retrieve self-expiring, session-based messages. Available Methods The plugin exposes a number of methods: setSessionManager(Laminas\\Session\\ManagerInterface $manager) : FlashMessenger : Allows you to specify an alternate session manager, if desired. getSessionManager() : Laminas\\Session\\ManagerInterface : Allows you to retrieve the session manager registered. getContainer() : Laminas\\Session\\Container : Returns the Laminas\\Session\\Container instance in which the flash messages are stored. setNamespace(string $namespace = 'default') : FlashMessenger : Allows you to specify a specific namespace in the container in which to store or from which to retrieve flash messages. getNamespace() : string : retrieves the name of the flash message namespace. addMessage(string $message) : FlashMessenger : Allows you to add a message to the current namespace of the session container. hasMessages() : bool : Lets you determine if there are any flash messages from the current namespace in the session container. getMessages() : array : Retrieves the flash messages from the current namespace of the session container clearMessages() : bool : Clears all flash messages in current namespace of the session container. Returns true if messages were cleared, false if none existed. hasCurrentMessages() : bool : Indicates whether any messages were added during the current request. getCurrentMessages() : array : Retrieves any messages added during the current request. clearCurrentMessages() : bool : Removes any messages added during the current request. Returns true if current messages were cleared, false if none existed. clearMessagesFromContainer() : bool : Clear all messages from the container. Returns true if any messages were cleared, false if none existed. This plugin also provides four meaningful namespaces, namely: INFO , ERROR , WARNING , and SUCCESS . The following functions are related to these namespaces: addInfoMessage(string $message): FlashMessenger : Add a message to \"info\" namespace. hasCurrentInfoMessages() : bool : Check to see if messages have been added to \"info\" namespace within this request. addWarningMessage(string $message) : FlashMessenger : Add a message to \"warning\" namespace. hasCurrentWarningMessages() : bool : Check to see if messages have been added to \"warning\" namespace within this request. addErrorMessage(string $message) : FlashMessenger : Add a message to \"error\" namespace. hasCurrentErrorMessages() : bool : Check to see if messages have been added to \"error\" namespace within this request. addSuccessMessage(string $message) : FlashMessenger : Add a message to \"success\" namespace. hasCurrentSuccessMessages() :bool : Check to see if messages have been added to \"success\" namespace within this request. Additionally, the FlashMessenger implements both IteratorAggregate and Countable , allowing you to iterate over and count the flash messages in the current namespace within the session container. Example public function processAction() { // Do some work… $this-&gt;flashMessenger()-&gt;addMessage('You are now logged in.'); return $this-&gt;redirect()-&gt;toRoute('user-success'); } public function successAction() { $return = ['success' =&gt; true]; if ($this-&gt;flashMessenger()-&gt;hasMessages()) { $return['messages'] = $this-&gt;flashMessenger()-&gt;getMessages(); } return $return; }","title":"Controller Plugin"},{"location":"controller-plugin/#flashmessenger-controller-plugin","text":"The FlashMessenger controller plugin is designed to create and retrieve self-expiring, session-based messages.","title":"FlashMessenger Controller Plugin"},{"location":"controller-plugin/#available-methods","text":"The plugin exposes a number of methods: setSessionManager(Laminas\\Session\\ManagerInterface $manager) : FlashMessenger : Allows you to specify an alternate session manager, if desired. getSessionManager() : Laminas\\Session\\ManagerInterface : Allows you to retrieve the session manager registered. getContainer() : Laminas\\Session\\Container : Returns the Laminas\\Session\\Container instance in which the flash messages are stored. setNamespace(string $namespace = 'default') : FlashMessenger : Allows you to specify a specific namespace in the container in which to store or from which to retrieve flash messages. getNamespace() : string : retrieves the name of the flash message namespace. addMessage(string $message) : FlashMessenger : Allows you to add a message to the current namespace of the session container. hasMessages() : bool : Lets you determine if there are any flash messages from the current namespace in the session container. getMessages() : array : Retrieves the flash messages from the current namespace of the session container clearMessages() : bool : Clears all flash messages in current namespace of the session container. Returns true if messages were cleared, false if none existed. hasCurrentMessages() : bool : Indicates whether any messages were added during the current request. getCurrentMessages() : array : Retrieves any messages added during the current request. clearCurrentMessages() : bool : Removes any messages added during the current request. Returns true if current messages were cleared, false if none existed. clearMessagesFromContainer() : bool : Clear all messages from the container. Returns true if any messages were cleared, false if none existed. This plugin also provides four meaningful namespaces, namely: INFO , ERROR , WARNING , and SUCCESS . The following functions are related to these namespaces: addInfoMessage(string $message): FlashMessenger : Add a message to \"info\" namespace. hasCurrentInfoMessages() : bool : Check to see if messages have been added to \"info\" namespace within this request. addWarningMessage(string $message) : FlashMessenger : Add a message to \"warning\" namespace. hasCurrentWarningMessages() : bool : Check to see if messages have been added to \"warning\" namespace within this request. addErrorMessage(string $message) : FlashMessenger : Add a message to \"error\" namespace. hasCurrentErrorMessages() : bool : Check to see if messages have been added to \"error\" namespace within this request. addSuccessMessage(string $message) : FlashMessenger : Add a message to \"success\" namespace. hasCurrentSuccessMessages() :bool : Check to see if messages have been added to \"success\" namespace within this request. Additionally, the FlashMessenger implements both IteratorAggregate and Countable , allowing you to iterate over and count the flash messages in the current namespace within the session container.","title":"Available Methods"},{"location":"controller-plugin/#example","text":"public function processAction() { // Do some work… $this-&gt;flashMessenger()-&gt;addMessage('You are now logged in.'); return $this-&gt;redirect()-&gt;toRoute('user-success'); } public function successAction() { $return = ['success' =&gt; true]; if ($this-&gt;flashMessenger()-&gt;hasMessages()) { $return['messages'] = $this-&gt;flashMessenger()-&gt;getMessages(); } return $return; }","title":"Example"},{"location":"installation/","text":"This Is Only a Placeholder The content of this page can be found under: https://github.com/laminas/documentation-theme/blob/master/theme/pages/installation.html","title":"Installation"},{"location":"installation/#this-is-only-a-placeholder","text":"The content of this page can be found under: https://github.com/laminas/documentation-theme/blob/master/theme/pages/installation.html","title":"This Is Only a Placeholder"},{"location":"introduction/","text":"Introduction Giving feedback to a user is an important part of a good application. Flash messages provide notifications to the user, such as for successful form submissions, failure to save data in the database, and incorrect authentication credentials. A message is created at the end of one request, and shown to the user in the next request. Flash messages are self-expiring and session-based. To create and expose flash messages in a laminas-mvc-based application, this packages provides: a controller plugin to create and retrieve messages a view helper to render the messages A flash message is set in a controller and then rendered in a view script. Namespaces The controller plugin and the view helper support different types of messages: default info success warning error These namespaces provide support for handling different output formats.","title":"Introduction"},{"location":"introduction/#introduction","text":"Giving feedback to a user is an important part of a good application. Flash messages provide notifications to the user, such as for successful form submissions, failure to save data in the database, and incorrect authentication credentials. A message is created at the end of one request, and shown to the user in the next request. Flash messages are self-expiring and session-based. To create and expose flash messages in a laminas-mvc-based application, this packages provides: a controller plugin to create and retrieve messages a view helper to render the messages A flash message is set in a controller and then rendered in a view script.","title":"Introduction"},{"location":"introduction/#namespaces","text":"The controller plugin and the view helper support different types of messages: default info success warning error These namespaces provide support for handling different output formats.","title":"Namespaces"},{"location":"view-helper/","text":"FlashMessenger View Helper The FlashMessenger view helper is used to render the messages of the FlashMessenger controller plugin . Basic Usage When only using the default namespace for the FlashMessenger , you can do the following: // Usable in any of your .phtml files echo $this-&gt;flashMessenger()-&gt;render(); The first argument of the render() function is the namespace . If no namespace is defined, the default Laminas\\Mvc\\Controller\\Plugin\\FlashMessenger::NAMESPACE_DEFAULT will be used, which translates to default . // Usable in any of your .phtml files echo $this-&gt;flashMessenger()-&gt;render('error'); // Alternatively use one of the pre-defined namespaces // (aka: use Laminas\\Mvc\\Controller\\Plugin\\FlashMessenger;) echo $this-&gt;flashMessenger()-&gt;render(FlashMessenger::NAMESPACE_SUCCESS); CSS Layout The FlashMessenger default rendering adds a CSS class to the generated HTML, that matches the defined namespace that should be rendered. While it may work well for the default cases, every so often you may want to add specific CSS classes to the HTML output. This can be done while making use of the second parameter of the render() function. // Usable in any of your .phtml files echo $this-&gt;flashMessenger()-&gt;render('error', ['alert', 'alert-danger']); The output of this example, using the default HTML rendering settings, would look like this: &lt;ul class=\"alert alert-danger\"&gt; &lt;li&gt;Some FlashMessenger Content&lt;/li&gt; &lt;li&gt;You, the developer, are AWESOME!&lt;/li&gt; &lt;/ul&gt; HTML Layout Aside from modifying the rendered CSS classes of the FlashMessenger , you are furthermore able to modify the generated HTML as a whole to create even more distinct visuals for your flash messages. The default output format is defined within the source code of the FlashMessenger view helper. protected $messageCloseString = '&lt;/li&gt;&lt;/ul&gt;'; protected $messageOpenFormat = '&lt;ul%s&gt;&lt;li&gt;'; protected $messageSeparatorString = '&lt;/li&gt;&lt;li&gt;'; These defaults exactly match what we're trying to do. The placeholder %s will be filled with the CSS classes output. To change this, all we need to do is call the respective setter methods of these variables and give them new strings; for example: // In any of your .phtml files: echo $this-&gt;flashMessenger() -&gt;setMessageOpenFormat('&lt;div%s&gt;&lt;p&gt;') -&gt;setMessageSeparatorString('&lt;/p&gt;&lt;p&gt;') -&gt;setMessageCloseString('&lt;/p&gt;&lt;/div&gt;') -&gt;render('success'); The above code sample then would then generate the following output: &lt;div class=\"success\"&gt; &lt;p&gt;Some FlashMessenger Content&lt;/p&gt; &lt;p&gt;You, who's reading the docs, are AWESOME!&lt;/p&gt; &lt;/div&gt; IDE Auto-Completion in Templates The Laminas\\Mvc\\Plugin\\FlashMessenger\\View\\HelperTrait trait can be used to provide auto-completion for modern IDEs. It defines the aliases of the view helpers in a DocBlock as @method tags. Usage In order to allow auto-completion in templates, $this variable should be type-hinted via a DocBlock at the top of a template. It is recommended that always the Laminas\\View\\Renderer\\PhpRenderer is added as the first type, so that the IDE can auto-suggest the default view helpers from laminas-view . The HelperTrait from laminas-mvc-plugin-flashmessenger can be chained with a pipe symbol (a.k.a. vertical bar) | : /** * @var Laminas\\View\\Renderer\\PhpRenderer|Laminas\\Mvc\\Plugin\\FlashMessenger\\View\\HelperTrait $this */ The HelperTrait traits can be chained as many as needed, depending on which view helpers from the different Laminas component are used and where the auto-completion is to be made.","title":"View Helper"},{"location":"view-helper/#flashmessenger-view-helper","text":"The FlashMessenger view helper is used to render the messages of the FlashMessenger controller plugin .","title":"FlashMessenger View Helper"},{"location":"view-helper/#basic-usage","text":"When only using the default namespace for the FlashMessenger , you can do the following: // Usable in any of your .phtml files echo $this-&gt;flashMessenger()-&gt;render(); The first argument of the render() function is the namespace . If no namespace is defined, the default Laminas\\Mvc\\Controller\\Plugin\\FlashMessenger::NAMESPACE_DEFAULT will be used, which translates to default . // Usable in any of your .phtml files echo $this-&gt;flashMessenger()-&gt;render('error'); // Alternatively use one of the pre-defined namespaces // (aka: use Laminas\\Mvc\\Controller\\Plugin\\FlashMessenger;) echo $this-&gt;flashMessenger()-&gt;render(FlashMessenger::NAMESPACE_SUCCESS);","title":"Basic Usage"},{"location":"view-helper/#css-layout","text":"The FlashMessenger default rendering adds a CSS class to the generated HTML, that matches the defined namespace that should be rendered. While it may work well for the default cases, every so often you may want to add specific CSS classes to the HTML output. This can be done while making use of the second parameter of the render() function. // Usable in any of your .phtml files echo $this-&gt;flashMessenger()-&gt;render('error', ['alert', 'alert-danger']); The output of this example, using the default HTML rendering settings, would look like this: &lt;ul class=\"alert alert-danger\"&gt; &lt;li&gt;Some FlashMessenger Content&lt;/li&gt; &lt;li&gt;You, the developer, are AWESOME!&lt;/li&gt; &lt;/ul&gt;","title":"CSS Layout"},{"location":"view-helper/#html-layout","text":"Aside from modifying the rendered CSS classes of the FlashMessenger , you are furthermore able to modify the generated HTML as a whole to create even more distinct visuals for your flash messages. The default output format is defined within the source code of the FlashMessenger view helper. protected $messageCloseString = '&lt;/li&gt;&lt;/ul&gt;'; protected $messageOpenFormat = '&lt;ul%s&gt;&lt;li&gt;'; protected $messageSeparatorString = '&lt;/li&gt;&lt;li&gt;'; These defaults exactly match what we're trying to do. The placeholder %s will be filled with the CSS classes output. To change this, all we need to do is call the respective setter methods of these variables and give them new strings; for example: // In any of your .phtml files: echo $this-&gt;flashMessenger() -&gt;setMessageOpenFormat('&lt;div%s&gt;&lt;p&gt;') -&gt;setMessageSeparatorString('&lt;/p&gt;&lt;p&gt;') -&gt;setMessageCloseString('&lt;/p&gt;&lt;/div&gt;') -&gt;render('success'); The above code sample then would then generate the following output: &lt;div class=\"success\"&gt; &lt;p&gt;Some FlashMessenger Content&lt;/p&gt; &lt;p&gt;You, who's reading the docs, are AWESOME!&lt;/p&gt; &lt;/div&gt; IDE Auto-Completion in Templates The Laminas\\Mvc\\Plugin\\FlashMessenger\\View\\HelperTrait trait can be used to provide auto-completion for modern IDEs. It defines the aliases of the view helpers in a DocBlock as @method tags.","title":"HTML Layout"},{"location":"cookbook/application-wide-layout/","text":"Set Application-Wide Layout The format for the FlashMessenger view helper can be configured for an entire application as well as all uses of the helper. Laminas\\View\\Helper\\Service\\FlashMessengerFactory checks the application configuration and creates the view helper with the given format options. Set the Format for All Namespaces Add the following lines to the local or global configuration file, e.g. config/autoload/global.config.php : return [ 'view_helper_config' =&gt; [ 'flashmessenger' =&gt; [ 'message_open_format' =&gt; '&lt;p%s&gt;', 'message_close_string' =&gt; '&lt;/p&gt;', 'message_separator_string' =&gt; '&lt;br&gt;', ], ], ]; Set Formats Individually for Namespaces New Feature Available since version 1.8.0 Add the following lines to the local or global configuration file, e.g. config/autoload/global.config.php : return [ 'view_helper_config' =&gt; [ 'flashmessenger' =&gt; [ 'default' =&gt; [ 'message_open_format' =&gt; '&lt;p%s&gt;', 'message_close_string' =&gt; '&lt;/p&gt;', 'message_separator_string' =&gt; '&lt;br&gt;', 'classes' =&gt; 'custom-default example-class', ], 'success' =&gt; [ 'message_open_format' =&gt; '&lt;p%s&gt;', 'message_close_string' =&gt; '&lt;/p&gt;', 'message_separator_string' =&gt; '&lt;br&gt;', 'classes' =&gt; 'custom-success example-class', ], 'warning' =&gt; [ // … ], 'error' =&gt; [ // … ], 'info' =&gt; [ // … ], ], ], ]; If the default unordered list should be retained, then set only the classes: return [ 'view_helper_config' =&gt; [ 'flashmessenger' =&gt; [ 'default' =&gt; [ 'classes' =&gt; 'custom-default', ], 'success' =&gt; [ 'classes' =&gt; 'custom-success', ], 'warning' =&gt; [ 'classes' =&gt; 'custom-warning', ], 'error' =&gt; [ 'classes' =&gt; 'custom-error', ], 'info' =&gt; [ 'classes' =&gt; 'custom-info', ], ], ], ];","title":"Set Application-Wide Layout"},{"location":"cookbook/application-wide-layout/#set-application-wide-layout","text":"The format for the FlashMessenger view helper can be configured for an entire application as well as all uses of the helper. Laminas\\View\\Helper\\Service\\FlashMessengerFactory checks the application configuration and creates the view helper with the given format options.","title":"Set Application-Wide Layout"},{"location":"cookbook/application-wide-layout/#set-the-format-for-all-namespaces","text":"Add the following lines to the local or global configuration file, e.g. config/autoload/global.config.php : return [ 'view_helper_config' =&gt; [ 'flashmessenger' =&gt; [ 'message_open_format' =&gt; '&lt;p%s&gt;', 'message_close_string' =&gt; '&lt;/p&gt;', 'message_separator_string' =&gt; '&lt;br&gt;', ], ], ];","title":"Set the Format for All Namespaces"},{"location":"cookbook/application-wide-layout/#set-formats-individually-for-namespaces","text":"New Feature Available since version 1.8.0 Add the following lines to the local or global configuration file, e.g. config/autoload/global.config.php : return [ 'view_helper_config' =&gt; [ 'flashmessenger' =&gt; [ 'default' =&gt; [ 'message_open_format' =&gt; '&lt;p%s&gt;', 'message_close_string' =&gt; '&lt;/p&gt;', 'message_separator_string' =&gt; '&lt;br&gt;', 'classes' =&gt; 'custom-default example-class', ], 'success' =&gt; [ 'message_open_format' =&gt; '&lt;p%s&gt;', 'message_close_string' =&gt; '&lt;/p&gt;', 'message_separator_string' =&gt; '&lt;br&gt;', 'classes' =&gt; 'custom-success example-class', ], 'warning' =&gt; [ // … ], 'error' =&gt; [ // … ], 'info' =&gt; [ // … ], ], ], ]; If the default unordered list should be retained, then set only the classes: return [ 'view_helper_config' =&gt; [ 'flashmessenger' =&gt; [ 'default' =&gt; [ 'classes' =&gt; 'custom-default', ], 'success' =&gt; [ 'classes' =&gt; 'custom-success', ], 'warning' =&gt; [ 'classes' =&gt; 'custom-warning', ], 'error' =&gt; [ 'classes' =&gt; 'custom-error', ], 'info' =&gt; [ 'classes' =&gt; 'custom-info', ], ], ], ];","title":"Set Formats Individually for Namespaces"},{"location":"cookbook/bootstrap/","text":"Use Alerts from Bootstrap To use the syntax of the alerts from the Bootstrap CSS framework for the output of the view helper, the configuration of the message format must be adjusted. To do that, add the following lines to the local or global configuration file, e.g. config/autoload/global.config.php : return [ 'view_helper_config' =&gt; [ 'flashmessenger' =&gt; [ 'default' =&gt; [ 'message_open_format' =&gt; '&lt;div%s role=\"alert\"&gt;', 'message_close_string' =&gt; '&lt;/div&gt;', 'message_separator_string' =&gt; '&lt;/div&gt;&lt;div%s role=\"alert\"&gt;', 'classes' =&gt; 'alert alert-primary', ], 'success' =&gt; [ 'message_open_format' =&gt; '&lt;div%s role=\"alert\"&gt;', 'message_close_string' =&gt; '&lt;/div&gt;', 'message_separator_string' =&gt; '&lt;/div&gt;&lt;div%s role=\"alert\"&gt;', 'classes' =&gt; 'alert alert-success', ], 'warning' =&gt; [ 'message_open_format' =&gt; '&lt;div%s role=\"alert\"&gt;', 'message_close_string' =&gt; '&lt;/div&gt;', 'message_separator_string' =&gt; '&lt;/div&gt;&lt;div%s role=\"alert\"&gt;', 'classes' =&gt; 'alert alert-success', ], 'error' =&gt; [ 'message_open_format' =&gt; '&lt;div%s role=\"alert\"&gt;', 'message_close_string' =&gt; '&lt;/div&gt;', 'message_separator_string' =&gt; '&lt;/div&gt;&lt;div%s role=\"alert\"&gt;', 'classes' =&gt; 'alert alert-danger', ], 'info' =&gt; [ 'message_open_format' =&gt; '&lt;div%s role=\"alert\"&gt;', 'message_close_string' =&gt; '&lt;/div&gt;', 'message_separator_string' =&gt; '&lt;/div&gt;&lt;div%s role=\"alert\"&gt;', 'classes' =&gt; 'alert alert-info', ], ], ], ]; This will set the format for all uses of the view helper .","title":"Use Alerts from Bootstrap"},{"location":"cookbook/bootstrap/#use-alerts-from-bootstrap","text":"To use the syntax of the alerts from the Bootstrap CSS framework for the output of the view helper, the configuration of the message format must be adjusted. To do that, add the following lines to the local or global configuration file, e.g. config/autoload/global.config.php : return [ 'view_helper_config' =&gt; [ 'flashmessenger' =&gt; [ 'default' =&gt; [ 'message_open_format' =&gt; '&lt;div%s role=\"alert\"&gt;', 'message_close_string' =&gt; '&lt;/div&gt;', 'message_separator_string' =&gt; '&lt;/div&gt;&lt;div%s role=\"alert\"&gt;', 'classes' =&gt; 'alert alert-primary', ], 'success' =&gt; [ 'message_open_format' =&gt; '&lt;div%s role=\"alert\"&gt;', 'message_close_string' =&gt; '&lt;/div&gt;', 'message_separator_string' =&gt; '&lt;/div&gt;&lt;div%s role=\"alert\"&gt;', 'classes' =&gt; 'alert alert-success', ], 'warning' =&gt; [ 'message_open_format' =&gt; '&lt;div%s role=\"alert\"&gt;', 'message_close_string' =&gt; '&lt;/div&gt;', 'message_separator_string' =&gt; '&lt;/div&gt;&lt;div%s role=\"alert\"&gt;', 'classes' =&gt; 'alert alert-success', ], 'error' =&gt; [ 'message_open_format' =&gt; '&lt;div%s role=\"alert\"&gt;', 'message_close_string' =&gt; '&lt;/div&gt;', 'message_separator_string' =&gt; '&lt;/div&gt;&lt;div%s role=\"alert\"&gt;', 'classes' =&gt; 'alert alert-danger', ], 'info' =&gt; [ 'message_open_format' =&gt; '&lt;div%s role=\"alert\"&gt;', 'message_close_string' =&gt; '&lt;/div&gt;', 'message_separator_string' =&gt; '&lt;/div&gt;&lt;div%s role=\"alert\"&gt;', 'classes' =&gt; 'alert alert-info', ], ], ], ]; This will set the format for all uses of the view helper .","title":"Use Alerts from Bootstrap"}]}